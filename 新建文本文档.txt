什么是JS
前端三大语言：html css js（JavaScript）
js:专门编写前段交互的语言

js控制台
变量名=数据（就是数值的意思）

数据类型转换
js是一门弱类型编程语言
1 js在声明变量时不用提前规定数据变量类型
2 在赋值时，根据存入数据，动态决定数据类型，同一变量可以保存不同类型数据
3 在运算时，js会根据需要动态的给边数据类型。

1隐式转换
   不需要程序干预，js会根据需要自动转换数据类型

   有字符串参与：所有类型转换成string做字符串拼接
   没有字符串进行参与：所有类型转换number在做算数计算。
   NAN：跟任何数据进行计算永远返回NAN。
    注：只在运算过程中转换，不会改变变量中实际储存。
2强制转换
   任意类型转换成字符串

continue 终止后面的程序，直接跳到下一个循环；

函数

声明：function 任务名(变量){函数体}
调用：任务名（变量）；
参数：专门接收传入函数内部数据的变量；
如何声明参数：直接在函数名后面括号中书写参数，每个参数中间以,隔开；
返回值：函数调用后返回执行结果
如何返回：在函数内部return 返回值；
           return退出函数执行返回数据结果（只返回数据，不负责保存结果）
变量的作用域
        1 全局作用域：定义在window下的作用域，任何位置都可以访问
           全局变量：定义在全局作用下的变量
            1 直接定义在函数外部的变量
            2 为从未声明过的变量赋值，自动在全局创建同名变量
              优势：共享
              劣势：牵一动而动全身，全局容易被污染
        2 局部作用域：作用在函数内，只在函数内部可用
            局部变量：
             1 在函数内部声明的变量
             2 函数里面参数
数组API：
       1 数组-》字符串
       arr.toString();
       arr.join("连接符")
       将字母拼接成单词，将单词拼接成句子
       优化：频繁拼接字符串容易造成内存浪费：
             现将要拼接的字符串放入数组中，再进行拼接。
       2 数组拼接截取：源对象保持不变，返回新数组
        var newarr=arr.concat(值1，值2，...)
        var newarr=arr.slice(start,end) 
        剔除arr中从start起到end结尾位置之间的数组元素并返回新数值。
        含头不含尾
       3 剔除，插入，替换
         arr.splice(start,n,"")
       4 倒装句
         arr.reverse()
       5
         arr.indexOf(n，start)
         查找元素第一次出现的位置
       6
         arr.sort()
         默认将一切元素转换成字符串进行排序
       7
        arr.push(n) 向数组末尾添加元素
        arr.pop(n) 删除数组末尾元素
        arr.unshift(n) 向数组开头添加元素
        arr.shift(n) 删除数组末尾元素
二维元素：数组中元素引用另一个数组元素
       when:需要保存横行数列的数据：具有上下级包含关系时。
            arr[行下标][列下标]
            注意：一维数组下标越界不会报错
                  二维数组列下标越界不会报错，行下标越界会报错
JS内置对象：ES标准规定的由厂商已经实现的对象
            11种：Number String Boolean
                  Array Math Date RegEx//正则
                  Error
                  Function Object
                  Global全局
js常见错误
            1 SyntaxError 语法错误
            2 ReferenceError:引用错误，找不到变量对象
            3 TypeError:类型错误 错误使用了对象中方法
            4 RangeError:参数范围错误，参数超出范围
            5 URLError:url路径错误
            6 EvalError:调用eval函数时出错
字符串对象：多个字符组成的一个只读的集合（数组）
            凡数组操作中，不修改原对象的API字符串都可以直接用：
            String API
            1 转义字符：当字符串内容和程序中特殊符号冲突时或字符串包含功能字符的时候
                       用\转化字符的意义
                       \n换行
                       \t空格
            2 大小写：凡是希望大小写一视同仁的情况下转成相同格式：
              str.toUpperCase()全部大写
              str.toLowerCase()全部小写
            3 获取指定位置字符str[i]|str.charAt(i);
                              str.charCodeAt(0)
            4 获取字符串关键词位置str.indexOf("关键词"，开始位置)；
            5 获取字符串str.substring(start,end)|str.substr(起始位置，n个)
            6 分割字符串var arr=str.split("分隔符",n);返回的是数组
              when:今后只要是对字符内容分段处理，先分割再遍历
            7 str.replace("要替换内容","替换的内容")
              注：替换只能执行一次，需要全局匹配，使用正则
Math对象：封装数学计算的对象，封装数学计算中常用常量以及方法
            1 取整：Math.round(num)四舍五入
                    Math.ceil(num)上取整
                    Math.floor(num)上取整
            2 Math.pow(x,y)
            3 Math.max(值1，值2...)返回较大的数
              Math.min(值1，值2...)返回较小的数
              Math.max.apply(值1，值2...)返回数值中较大的数
              Math.min.apply(值1，值2...)返回数值中较小的数
            4 Math.random() 随机数
date:封装了一个时间点提供了对日期和时间操作的API
创建Date对象
var now=new Date();
console.log(now.toString());
var now=new Date("2017/04/05");
console.log(now.toString());
var now=new Date("2017/04/05");
console.log(now.getTime());
console.log(now.getDay());
console.log(now.getFullYear());
console.log(now.getMonth());
console.log(now.getDate());
console.log(now.getHours());
console.log(now.getMinutes());
console.log(now.getSeconds());

Dhtml:动态技术统称
	html css js
	七大对象：
	window:当前浏览器打开窗口
	document：当前正在打开的HTML窗口
	navigator：封装了软件的版本信息和部分设置
	history：封装当前窗口成功浏览过的万至历史记录
	location：当前窗口栏的地址
	screen:当前显示器
	event：事件对象
HTML XHTML dhtml xml Json Jsonp
ES ECMAScript 欧洲计算机协会
Bom 浏览器对象模型，用来访问和操作浏览器窗口没人制定标准，但被广泛支持
dom 文档对象模型 W3C组织定义访问的错做标准，可以对网页对象做任意修改
核心DOM：所有结构化文档通用API
DOM树：在html中Dom将文档时做一棵树
	文档中的元素属性文本注释都被看作成一个节点-Node
	当页面被加载进内存的时候，浏览器都会为网页创建一个document对象   																
        所有节点都是document的子节点
	document对象封装了网页中所有子节点的增加，删除，修改
	document.getElementById() 获取特定ID的元素节点
	document.getElementByTagName() 获取相同元素的节点列表
	document.getElementByTagName() 获取相同name名称的节点列表
	并不所有的标签都具备name属性 IE8有兼容问题
	document.getElementByClassName() 获取相同class属性的节点列表
		节点树 							元素树
	childNodes 获取当期元素所有的子节点				.children
	nodeName 用来获取元素节点的标签名称   				.firstElementchild
	nodeValue 用来获取文本节点文本内容nt				.lastElementChild
	nodeType 用来判断到底是什么节点(元素1 文本3)                    .parentElement									.previousElementSibiling
	firstChild 获取当前元素节点的第一个子节点			.previousElementSibiling 
	lastChild 获取当前元素节点的最后一个子节点			.nextElementSibiling          		
	parentNode 获取当前元素节点的所有的父节点
	previousSibling 获取当前元素节点的上一个同级节点
	nextSibling	获取当前元素节点的下一个同级节点
	ownerDocument	获取文档根节点 相当于Document
	元素树:有元素节点组成的树结构（6）
        innerHTML：开始标签和结束标签的原文
	兼容问题 table tr
	innerText 输出文本内容o
